<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zlsx.comzlsx.mapper.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.zlsx.comzlsx.domain.Article">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="context" jdbcType="VARCHAR" property="context"/>
        <result column="images" jdbcType="VARCHAR" property="images"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="deleted" jdbcType="BIT" property="deleted"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        id, user_id, context, images, `status`, create_time, update_time, deleted
    </sql>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        update article
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="user_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.userId,jdbcType=INTEGER}
                </foreach>
            </trim>
            <trim prefix="context = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.context,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="images = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.images,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="`status` = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.status,jdbcType=INTEGER}
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.createTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.updateTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="deleted = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=INTEGER} then #{item.deleted,jdbcType=BIT}
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        insert into article
        (user_id, context, images, `status`, create_time, update_time, deleted)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.userId,jdbcType=INTEGER}, #{item.context,jdbcType=VARCHAR}, #{item.images,jdbcType=VARCHAR},
            #{item.status,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP},
            #{item.deleted,jdbcType=BIT})
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="com.zlsx.comzlsx.domain.Article"
            useGeneratedKeys="true">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            user_id,
            context,
            images,
            `status`,
            create_time,
            update_time,
            deleted,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            #{userId,jdbcType=INTEGER},
            #{context,jdbcType=VARCHAR},
            #{images,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP},
            #{deleted,jdbcType=BIT},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=INTEGER},
            </if>
            user_id = #{userId,jdbcType=INTEGER},
            context = #{context,jdbcType=VARCHAR},
            images = #{images,jdbcType=VARCHAR},
            `status` = #{status,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            deleted = #{deleted,jdbcType=BIT},
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="com.zlsx.comzlsx.domain.Article"
            useGeneratedKeys="true">
        <!--@mbg.generated generated on Fri Aug 23 14:04:50 CST 2019.-->
        insert into article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="context != null">
                context,
            </if>
            <if test="images != null">
                images,
            </if>
            <if test="status != null">
                `status`,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="context != null">
                #{context,jdbcType=VARCHAR},
            </if>
            <if test="images != null">
                #{images,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=BIT},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="context != null">
                context = #{context,jdbcType=VARCHAR},
            </if>
            <if test="images != null">
                images = #{images,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <select id="selectallbyids" resultMap="BaseResultMap">
        select * from article where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="selectAllBuyUserOrderByTime" resultType="com.zlsx.comzlsx.dto.response.ArticleDto">
        select a.*,u.nick_name,u.avatar
        from article a
        left join user_info u on a.user_id = u.id
        where 1=1
        <if test="uid != null">
            and user_id = #{uid}
        </if>
        <if test="type != null">
            and type = #{type}
        </if>
        <if test="classifyId != null">
            and classify_id = #{classifyId}
        </if>
        <if test="ids != null">
            and id in
            <foreach close=")" collection="list" item="item" open="(" separator=", ">
                #{item}
            </foreach>
        </if>
        <if test="isMember != null">
            and id in (select article_id from comment where user_id=#{uid})
        </if>
        order by a.create_time desc
    </select>
    <select id="selectArticleInfo" resultType="com.zlsx.comzlsx.dto.response.ArticleDto">
         select a.*,u.nick_name,u.avatar
        from article a
                 left join user_info u on a.user_id = u.id
        where a.id = #{id}
    </select>
    <select id="selectAllByAbout" resultType="com.zlsx.comzlsx.dto.response.ArticleDto">
         SELECT *
            FROM ( select a.*,u.nick_name,u.avatar
                    from article a
                             left join user_info u on a.user_id = u.id) tab
            WHERE id >= (SELECT FLOOR(MAX(id) * RAND()) FROM `article`)
    </select>
</mapper>